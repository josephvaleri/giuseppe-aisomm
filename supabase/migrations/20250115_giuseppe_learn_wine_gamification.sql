-- Giuseppe "Learn Wine!" Gamification Migration
-- Creates quiz system, mastery tracking, and user progress tables

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'quiz_answer_type') THEN
    CREATE TYPE quiz_answer_type AS ENUM ('correct','complete_90','complete_70','fail');
  END IF;
END$$;

-- Wine Quiz Questions Table
CREATE TABLE IF NOT EXISTS public.wine_quiz (
  question_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_area  text NOT NULL, -- Regions & Appellations | Grapes | Styles | Pairings | Classifications
  question    text NOT NULL,
  answer_a    text NOT NULL,
  answer_b    text NOT NULL,
  answer_c    text NOT NULL,
  correct_answer char(1) NOT NULL CHECK (correct_answer IN ('A','B','C')),
  incorrect_answer_response text,
  upvotes integer NOT NULL DEFAULT 0 CHECK (upvotes >= 0),
  downvotes integer NOT NULL DEFAULT 0 CHECK (downvotes >= 0),
  created_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS wine_quiz_study_area_idx ON public.wine_quiz (study_area);
CREATE INDEX IF NOT EXISTS wine_quiz_score_idx ON public.wine_quiz ((upvotes - downvotes));

-- Quiz Messages Table
CREATE TABLE IF NOT EXISTS public.quiz_messages (
  message_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  answer_type quiz_answer_type NOT NULL,
  message_text text NOT NULL
);

-- User Quiz Progress Table
CREATE TABLE IF NOT EXISTS public.user_quiz_progress (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  question_id bigint NOT NULL REFERENCES public.wine_quiz(question_id) ON DELETE CASCADE,
  study_area text NOT NULL,
  is_correct boolean NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT uq_user_question UNIQUE (user_id, question_id)
);

CREATE INDEX IF NOT EXISTS uqp_user_area_idx ON public.user_quiz_progress (user_id, study_area);

-- User Study Mastery Table
CREATE TABLE IF NOT EXISTS public.user_study_mastery (
  user_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  study_area text NOT NULL,
  correct_unique_count int NOT NULL DEFAULT 0 CHECK (correct_unique_count BETWEEN 0 AND 50),
  badge_tier smallint NOT NULL DEFAULT 1 CHECK (badge_tier BETWEEN 1 AND 5),
  updated_at timestamptz NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, study_area)
);

-- Function to update study mastery when user answers correctly
CREATE OR REPLACE FUNCTION public.update_study_mastery()
RETURNS trigger AS $$
BEGIN
  IF NEW.is_correct THEN
    INSERT INTO public.user_study_mastery (user_id, study_area, correct_unique_count, badge_tier)
    VALUES (NEW.user_id, NEW.study_area, 1, 1)
    ON CONFLICT (user_id, study_area)
    DO UPDATE
      SET correct_unique_count = LEAST(user_study_mastery.correct_unique_count + 1, 50),
          badge_tier = CASE
            WHEN user_study_mastery.correct_unique_count + 1 >= 40 THEN 5
            WHEN user_study_mastery.correct_unique_count + 1 >= 30 THEN 4
            WHEN user_study_mastery.correct_unique_count + 1 >= 20 THEN 3
            WHEN user_study_mastery.correct_unique_count + 1 >= 10 THEN 2
            ELSE 1 END,
          updated_at = now();
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update mastery
DROP TRIGGER IF EXISTS trg_update_study_mastery ON public.user_quiz_progress;
CREATE TRIGGER trg_update_study_mastery
AFTER INSERT ON public.user_quiz_progress
FOR EACH ROW EXECUTE FUNCTION public.update_study_mastery();

-- Enable Row Level Security
ALTER TABLE public.wine_quiz ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_quiz_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_study_mastery ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY p_read_quiz ON public.wine_quiz FOR SELECT USING (true);
CREATE POLICY p_read_quiz_messages ON public.quiz_messages FOR SELECT USING (true);

CREATE POLICY p_uqp_insert ON public.user_quiz_progress
  FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY p_uqp_read ON public.user_quiz_progress
  FOR SELECT TO authenticated USING (auth.uid() = user_id);

CREATE POLICY p_mastery_read ON public.user_study_mastery
  FOR SELECT TO authenticated USING (auth.uid() = user_id);

-- Insert default quiz messages
INSERT INTO public.quiz_messages (answer_type, message_text) VALUES
  ('correct','Bravo! Giuseppe raises a glass to you.'),
  ('complete_90','Magnifico! You crushed it — pour yourself a victory sip.'),
  ('complete_70','Good work — a few more swirls and you''ll be there.'),
  ('fail','No worries — even nonna burns the sauce. Try another flight!')
ON CONFLICT DO NOTHING;
