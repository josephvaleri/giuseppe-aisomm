
GIUSEPPE "LEARN WINE!" GAMIFICATION — CURSOR BUILD PROMPT (Single File)
======================================================================

Goal
----
Add Duolingo-style gamification to Giuseppe Somm: quizzes, feedback popups, mastery gauges, badges, and progress tracking — with Giuseppe’s warm, playful tone and Mediterranean visual style.

Stack
-----
- Next.js 14 (App Router), TypeScript
- Tailwind CSS + shadcn/ui + Framer Motion + lucide-react
- Supabase (Auth + Postgres + RLS)
- Audio + images in /public (cork-pop.mp3, giuseppe-avatar.png, giuseppe-toast.png)

Features
--------
1) New page: "Learn Wine!" with quiz type selector:
   - Pop Quiz: 5 questions, 1-minute timer
   - Sip & Learn: 10 questions, untimed

2) Quiz UI (Quizlet-style):
   - Question centered; three large answer buttons (A/B/C)
   - Click == submit (no extra submit button)
   - Thumbs-up/down to upvote/downvote question (stores to wine_quiz.upvotes/downvotes)
   - Wine-glass progress bar (fills as correct answers increase)
   - Correct answer: popup with quiz_messages.answer_type="correct"
   - Wrong answer: popup with wine_quiz.incorrect_answer_response
   - Popup auto-closes in 5s or user can click X

3) Completion Scoring
   - Pop Quiz: 4–5 correct => complete_90; 3 correct => complete_70; 0–2 => fail
   - Sip & Learn: 9–10 correct => complete_90; 6–8 => complete_70; 0–5 => fail
   - Show Giuseppe raising glass + quiz_messages.message_text for the outcome

4) Subject Mastery
   - Study areas: "Regions & Appellations", "Grapes", "Styles", "Pairings", "Classifications"
   - Track unique correct answers by study_area; no double counting (user_id + question_id unique)
   - Mastery Gauge per area: 0–50 with color bands:
       0–9 Red, 10–19 Pink, 20–29 Orange, 30–39 Yellow, 40–50 Green
   - Badge tiers by thresholds (names used in copy only): 0–9 Apprendista, 10–19 Degustatore, 20–29 Conoscitore, 30–39 Esperto, 40–50 Maestro di Vino

Visual & Audio Style
--------------------
- Palette: terracotta reds, olive greens, vineyard golds
- Sounds: soft cork-pop on correct answer
- Animations: wine pour progress, popup entrance/exit, speedometer needle

File Tree (scaffold)
--------------------
/app
  /learn
    page.tsx
    /components
      LearnWineIntro.tsx
      QuizTypeSelector.tsx
      QuizRunner.tsx
      QuestionCard.tsx
      QuizPopup.tsx
      WineGlassProgress.tsx
  /learn/mastery
    page.tsx
    /components
      MasteryGauge.tsx
      MasteryGrid.tsx
/api
  /quiz
    route.ts
  /quiz/answer
    route.ts
  /quiz/messages
    route.ts
/lib
  supabase-server.ts
  supabase-browser.ts
  quiz.ts
  mastery.ts
  types.ts
/public
  /audio/cork-pop.mp3
  /img/giuseppe-avatar.png
  /img/giuseppe-toast.png

Supabase SQL Migration (run in SQL editor)
------------------------------------------
```sql
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'quiz_answer_type') THEN
    CREATE TYPE quiz_answer_type AS ENUM ('correct','complete_90','complete_70','fail');
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS public.wine_quiz (
  question_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_area  text NOT NULL, -- Regions & Appellations | Grapes | Styles | Pairings | Classifications
  question    text NOT NULL,
  answer_a    text NOT NULL,
  answer_b    text NOT NULL,
  answer_c    text NOT NULL,
  correct_answer char(1) NOT NULL CHECK (correct_answer IN ('A','B','C')),
  incorrect_answer_response text,
  upvotes integer NOT NULL DEFAULT 0 CHECK (upvotes >= 0),
  downvotes integer NOT NULL DEFAULT 0 CHECK (downvotes >= 0),
  created_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS wine_quiz_study_area_idx ON public.wine_quiz (study_area);
CREATE INDEX IF NOT EXISTS wine_quiz_score_idx ON public.wine_quiz ((upvotes - downvotes));

CREATE TABLE IF NOT EXISTS public.quiz_messages (
  message_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  answer_type quiz_answer_type NOT NULL,
  message_text text NOT NULL
);

CREATE TABLE IF NOT EXISTS public.user_quiz_progress (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  question_id bigint NOT NULL REFERENCES public.wine_quiz(question_id) ON DELETE CASCADE,
  study_area text NOT NULL,
  is_correct boolean NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT uq_user_question UNIQUE (user_id, question_id)
);
CREATE INDEX IF NOT EXISTS uqp_user_area_idx ON public.user_quiz_progress (user_id, study_area);

CREATE TABLE IF NOT EXISTS public.user_study_mastery (
  user_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  study_area text NOT NULL,
  correct_unique_count int NOT NULL DEFAULT 0 CHECK (correct_unique_count BETWEEN 0 AND 50),
  badge_tier smallint NOT NULL DEFAULT 1 CHECK (badge_tier BETWEEN 1 AND 5),
  updated_at timestamptz NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, study_area)
);

CREATE OR REPLACE FUNCTION public.update_study_mastery()
RETURNS trigger AS $$
BEGIN
  IF NEW.is_correct THEN
    INSERT INTO public.user_study_mastery (user_id, study_area, correct_unique_count, badge_tier)
    VALUES (NEW.user_id, NEW.study_area, 1, 1)
    ON CONFLICT (user_id, study_area)
    DO UPDATE
      SET correct_unique_count = LEAST(user_study_mastery.correct_unique_count + 1, 50),
          badge_tier = CASE
            WHEN user_study_mastery.correct_unique_count + 1 >= 40 THEN 5
            WHEN user_study_mastery.correct_unique_count + 1 >= 30 THEN 4
            WHEN user_study_mastery.correct_unique_count + 1 >= 20 THEN 3
            WHEN user_study_mastery.correct_unique_count + 1 >= 10 THEN 2
            ELSE 1 END,
          updated_at = now();
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_update_study_mastery ON public.user_quiz_progress;
CREATE TRIGGER trg_update_study_mastery
AFTER INSERT ON public.user_quiz_progress
FOR EACH ROW EXECUTE FUNCTION public.update_study_mastery();

ALTER TABLE public.wine_quiz ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_quiz_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_study_mastery ENABLE ROW LEVEL SECURITY;

CREATE POLICY p_read_quiz ON public.wine_quiz FOR SELECT USING (true);
CREATE POLICY p_read_quiz_messages ON public.quiz_messages FOR SELECT USING (true);

CREATE POLICY p_uqp_insert ON public.user_quiz_progress
  FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY p_uqp_read ON public.user_quiz_progress
  FOR SELECT TO authenticated USING (auth.uid() = user_id);

CREATE POLICY p_mastery_read ON public.user_study_mastery
  FOR SELECT TO authenticated USING (auth.uid() = user_id);

INSERT INTO public.quiz_messages (answer_type, message_text) VALUES
  ('correct','Bravo! Giuseppe raises a glass to you.'),
  ('complete_90','Magnifico! You crushed it — pour yourself a victory sip.'),
  ('complete_70','Good work — a few more swirls and you’ll be there.'),
  ('fail','No worries — even nonna burns the sauce. Try another flight!');
```

Types (/lib/types.ts)
---------------------
```ts
export type StudyArea = 'Regions & Appellations' | 'Grapes' | 'Styles' | 'Pairings' | 'Classifications';

export type WineQuiz = {
  question_id: number;
  study_area: StudyArea;
  question: string;
  answer_a: string;
  answer_b: string;
  answer_c: string;
  correct_answer: 'A'|'B'|'C';
  incorrect_answer_response?: string | null;
  upvotes: number;
  downvotes: number;
};

export type QuizMessage = {
  message_id: number;
  answer_type: 'correct' | 'complete_90' | 'complete_70' | 'fail';
  message_text: string;
};
```

Supabase Clients
----------------
/lib/supabase-server.ts
```ts
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
export const supabaseServer = () => createServerComponentClient({ cookies });
```

/lib/supabase-browser.ts
```ts
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
export const supabaseBrowser = () => createClientComponentClient();
```

Quiz Helpers (/lib/quiz.ts)
---------------------------
```ts
import { supabaseServer } from './supabase-server';
export async function getQuizBatch(study: string, type: 'pop'|'sip') {
  const limit = type === 'pop' ? 5 : 10;
  const { data, error } = await supabaseServer()
    .from('wine_quiz')
    .select('*')
    .eq('study_area', study)
    .order('upvotes', { ascending: false })
    .limit(limit);
  if (error) throw error;
  return data;
}
```

Mastery Helpers (/lib/mastery.ts)
---------------------------------
```ts
import { supabaseServer } from './supabase-server';
export async function getUserMastery(user_id: string) {
  const { data, error } = await supabaseServer()
    .from('user_study_mastery')
    .select('*')
    .eq('user_id', user_id);
  if (error) throw error;
  return data;
}
```

API Routes
----------
/api/quiz/route.ts
```ts
import { NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase-server';
export async function GET(req: Request) {
  const url = new URL(req.url);
  const study = url.searchParams.get('study_area') ?? 'Grapes';
  const type  = url.searchParams.get('type') ?? 'pop';
  const limit = type === 'pop' ? 5 : 10;
  const { data, error } = await supabaseServer()
    .from('wine_quiz')
    .select('*')
    .eq('study_area', study)
    .order('upvotes', { ascending: false })
    .limit(limit);
  if (error) return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json({ items: data });
}
```

/api/quiz/answer/route.ts
```ts
import { NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase-server';
export async function POST(req: Request) {
  const body = await req.json();
  const { user_id, question_id, study_area, user_choice, correct_answer } = body;
  const is_correct = user_choice === correct_answer;
  const { error } = await supabaseServer()
    .from('user_quiz_progress')
    .insert({ user_id, question_id, study_area, is_correct });
  if (error && error.code !== '23505') {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  return NextResponse.json({ is_correct });
}
```

/api/quiz/messages/route.ts
```ts
import { NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase-server';
export async function GET(req: Request) {
  const url = new URL(req.url);
  const type = url.searchParams.get('type') || 'correct';
  const { data, error } = await supabaseServer()
    .from('quiz_messages')
    .select('*')
    .eq('answer_type', type)
    .limit(1)
    .single();
  if (error) return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json(data);
}
```

UI Components (skeletons)
-------------------------
/app/learn/components/LearnWineIntro.tsx
```tsx
export default function LearnWineIntro() {
  return (
    <section className="flex flex-col items-center text-center gap-3">
      <img src="/img/giuseppe-avatar.png" alt="Giuseppe" className="h-24 w-24 rounded-full shadow" />
      <h1 className="text-3xl font-bold">Learn Wine!</h1>
      <p className="text-muted-foreground max-w-xl">
        Ciao! I’m Giuseppe. Choose a quiz, earn badges, and master the wine world one delicious sip at a time.
      </p>
    </section>
  );
}
```

/app/learn/components/QuizTypeSelector.tsx
```tsx
'use client';
import { useRouter } from 'next/navigation';
export default function QuizTypeSelector() {
  const router = useRouter();
  return (
    <div className="flex gap-4 justify-center">
      <button className="btn" onClick={() => router.push('/learn?type=pop')}>Pop Quiz (1 min)</button>
      <button className="btn" onClick={() => router.push('/learn?type=sip')}>Sip & Learn (10 Q)</button>
    </div>
  );
}
```

/app/learn/components/QuestionCard.tsx
```tsx
'use client';
type Props = {
  question: string;
  answers: { A: string; B: string; C: string; };
  onAnswer: (choice: 'A'|'B'|'C') => void;
};
export default function QuestionCard({ question, answers, onAnswer }: Props) {
  return (
    <div className="space-y-4">
      <h3 className="text-xl font-semibold text-center">{question}</h3>
      {(['A','B','C'] as const).map((k) => (
        <button key={k} className="w-full p-4 rounded-xl shadow text-left bg-amber-50 hover:bg-amber-100"
          onClick={() => onAnswer(k)}>
          <span className="font-semibold mr-2">{k})</span>{answers[k]}
        </button>
      ))}
    </div>
  );
}
```

/app/learn/components/QuizPopup.tsx
```tsx
'use client';
import { motion, AnimatePresence } from 'framer-motion';
export default function QuizPopup({ open, message, onClose, variant }:{
  open: boolean; message: string; onClose: () => void; variant: 'correct'|'complete_90'|'complete_70'|'fail'|'wrong';
}) {
  return (
    <AnimatePresence>
      {open && (
        <motion.div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50"
          initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
          <motion.div className="bg-white rounded-2xl p-6 max-w-md w-full text-center shadow-xl"
            initial={{ scale: 0.9 }} animate={{ scale: 1 }} exit={{ scale: 0.9 }}>
            <img src={variant === 'correct' ? '/img/giuseppe-toast.png' : '/img/giuseppe-avatar.png'}
                 className="h-20 w-20 mx-auto mb-3" alt="Giuseppe" />
            <p className="text-lg">{message}</p>
            <button className="mt-4 btn" onClick={onClose}>Close</button>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
```

/app/learn/components/WineGlassProgress.tsx
```tsx
'use client';
import { motion } from 'framer-motion';
export default function WineGlassProgress({ total, correct }:{ total: number; correct: number; }) {
  const pct = Math.min(1, correct / total);
  return (
    <div className="relative h-12 w-full bg-amber-50 rounded-full overflow-hidden">
      <motion.div className="absolute inset-y-0 left-0 bg-gradient-to-r from-amber-300 to-amber-500"
        initial={{ width: 0 }} animate={{ width: `${pct*100}%` }} />
      <div className="absolute inset-0 flex items-center justify-center font-semibold">{correct}/{total}</div>
    </div>
  );
}
```

/app/learn/mastery/components/MasteryGauge.tsx
```tsx
'use client';
import { motion } from 'framer-motion';
export default function MasteryGauge({ value }:{ value: number }) {
  const pct = Math.max(0, Math.min(50, value)) / 50;
  const rotation = -120 + pct * 240;
  return (
    <div className="relative h-40 w-40">
      <svg viewBox="0 0 100 60" className="h-full w-full">
        <path d="M10,50 A40,40 0 0,1 90,50" fill="none" stroke="#ef4444" strokeWidth="6" />
        <path d="M10,50 A40,40 0 0,1 90,50" fill="none" strokeDasharray="80 80" stroke="#f472b6" strokeWidth="6" />
        <path d="M10,50 A40,40 0 0,1 90,50" fill="none" strokeDasharray="60 100" stroke="#fb923c" strokeWidth="6" />
        <path d="M10,50 A40,40 0 0,1 90,50" fill="none" strokeDasharray="40 120" stroke="#facc15" strokeWidth="6" />
        <path d="M10,50 A40,40 0 0,1 90,50" fill="none" strokeDasharray="20 140" stroke="#22c55e" strokeWidth="6" />
      </svg>
      <motion.div className="absolute left-1/2 bottom-2 origin-bottom" style={{ translateX: '-50%' }} animate={{ rotate: rotation }}>
        <div className="h-16 w-1 bg-gray-800 rounded" />
      </motion.div>
      <div className="absolute inset-x-0 bottom-0 text-center font-semibold">{value}/50</div>
    </div>
  );
}
```

Pages
-----
/app/learn/page.tsx
```tsx
import LearnWineIntro from './components/LearnWineIntro';
import QuizTypeSelector from './components/QuizTypeSelector';
export default async function LearnPage() {
  return (
    <main className="container py-8 space-y-8">
      <LearnWineIntro />
      <QuizTypeSelector />
    </main>
  );
}
```

/app/learn/mastery/page.tsx
```tsx
import MasteryGauge from './components/MasteryGauge';
import { supabaseServer } from '@/lib/supabase-server';
const AREAS = ['Regions & Appellations','Grapes','Styles','Pairings','Classifications'];
export default async function MasteryPage() {
  const supabase = supabaseServer();
  const { data: { user } } = await supabase.auth.getUser();
  const { data } = await supabase
    .from('user_study_mastery')
    .select('study_area, correct_unique_count')
    .eq('user_id', user?.id || '');
  const counts: Record<string, number> = Object.fromEntries(AREAS.map(a => [a, 0]));
  (data || []).forEach(row => { counts[row.study_area] = row.correct_unique_count; });
  return (
    <main className="container py-8">
      <h1 className="text-3xl font-bold mb-6">Subject Mastery</h1>
      <div className="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-5 gap-6">
        {AREAS.map(area => (
          <div key={area} className="p-4 rounded-2xl bg-amber-50 shadow">
            <h3 className="text-center font-semibold mb-3">{area}</h3>
            <MasteryGauge value={counts[area]} />
          </div>
        ))}
      </div>
    </main>
  );
}
```

Audio Hook
----------
```tsx
const audio = typeof window !== 'undefined' ? new Audio('/audio/cork-pop.mp3') : null;
export function playCork() { audio?.play().catch(() => {}); }
```

Use this checklist at every step and stop and check with me before moving onto the next item
Acceptance Checklist
--------------------
- [ ] Run SQL migration and RLS policies
- [ ] Seed quiz_messages
- [ ] Import `wine_quiz` questions (CSV)
- [ ] Build Learn page & quiz runner
- [ ] Implement popups and progress bar
- [ ] Wire scoring thresholds to messages
- [ ] Implement Subject Mastery and color bands
- [ ] Play cork-pop on correct
- [ ] Add lucide Crown icon for Maestro tier in badges
